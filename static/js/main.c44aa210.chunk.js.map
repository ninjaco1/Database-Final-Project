{"version":3,"sources":["logo.svg","Components/random.js","Components/DoctorsTable.js","views/Doctors.js","Components/HospitalTable.js","views/Hospital.js","Components/InsuranceProvidersTable.js","views/InsuranceProviders.js","Components/PatientsTable.js","views/Patients.js","Components/DrugTable.js","views/Drug.js","Components/Header.js","Components/PharmaciesTable.js","views/Pharmacies.js","Components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["seed","mW","mZ","mask","result","getRowId","row","id","defaultColumnValues","first_name","last_name","DOB","sex","phone_number","number_of_patients","DoctorsTable","useState","name","title","columns","columnValues","length","random","randomSeed","data","Object","keys","i","record","forEach","column","values","value","Math","floor","index","push","generateRows","rows","setRows","className","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","deletedSet","Set","filter","has","showAddCommand","showEditCommand","showDeleteCommand","Doctors","props","state","handleChange","bind","event","target","this","setState","React","Component","hospital_name","street_address","city","zip_code","HospitalTable","Hospital","validate","streetAddress","zipCode","provider_name","deductable","InsuranceProvidersTable","InsuranceProviders","weight","height","blood_type","medication_allergies","PatientsTable","Patients","class","drug_name","DrugTable","Drugs","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","PharmaciesTable","Pharmacies","Home","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c44aa210.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default function (seed = 123456789) {\r\n  let mW = seed;\r\n  let mZ = 987654321;\r\n  const mask = 0xffffffff;\r\n\r\n  return () => {\r\n    mZ = (36969 * (mZ & 65535) + (mZ >> 16)) & mask;\r\n    mW = (18000 * (mW & 65535) + (mW >> 16)) & mask;\r\n    let result = ((mZ << 16) + mW) & mask;\r\n    result /= 4294967296;\r\n    return result + 0.5;\r\n  };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet fnames = [\"Anthony\",\"Jacob\",'Bob','Bara']\r\nlet lname = [\"Nguyen\",\"Hershberger\", \"Myers\", \"Smith\"];\r\nlet DOBs = [\"1981/12/25\",\"1999/6/22\",\"2010/2/11\"];\r\nlet phoneNumbers = [\"xxx-xxx-xxx\"];\r\nlet numberOfPatients = [0,1,2,3,4,5,6];\r\n\r\n const defaultColumnValues = {\r\n    first_name: fnames,\r\n    last_name: lname,\r\n    DOB: DOBs,\r\n    sex: ['M', 'F'],\r\n    phone_number: phoneNumbers,\r\n    number_of_patients: numberOfPatients\r\n};\r\n\r\n\r\nexport default function DoctorsTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"first_name\", title: \"First Name\" },\r\n    { name: \"last_name\", title: \"Last Name\" },\r\n    { name: \"DOB\", title: \"Date of Birth\" },\r\n    { name: \"sex\", title: \"Sex\" },\r\n    { name: \"phone_number\", title: \"Phone Number\" },\r\n    { name: \"number_of_patients\", title: \"Number of Patients\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 4,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, {useState} from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Doctors.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport DoctorsTable from \"../Components/DoctorsTable\";\r\n\r\n\r\nclass Doctors extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  \r\n\trender() {\r\n\t  return (\r\n\t\t<div className=\"DoctorsPage\">\r\n\t\t  <header>\r\n\t\t\t<p>Doctor's Data Uploader</p>\r\n\t\t  </header>\r\n\t\t  <div>\r\n\t\t\t{/* <Form className=\"FormDoctors\">\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorFirst_Name\">\r\n\t\t\t\t<Form.Label>First Name</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"First Name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorLast_Name\">\r\n\t\t\t\t<Form.Label>Last Name</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Last Name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorDOB\">\r\n\t\t\t\t<Form.Label>Date of Birth</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"DOB\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorSex\">\r\n\t\t\t\t<Form.Label>Sex</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Sex\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorPhone_Number\">\r\n\t\t\t\t<Form.Label>Phone Number</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Phone Number\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t  Phone Number for Doctor\r\n\t\t\t\t</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group\r\n\t\t\t\tclassName=\"GroupDoctor\"\r\n\t\t\t\t controlId=\"DoctorNumber_Of_Patients\"\r\n\t\t\t  >\r\n\t\t\t\t<Form.Label>Number of Patients</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Number Of Patients\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Positive Integer</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\tSubmit\r\n\t\t\t  </Button>\r\n\t\t\t</Form> */}\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\t{/* table  */}\r\n\t\t\t\t<DoctorsTable />\r\n\t\t</div>\r\n\t  );\r\n\t}\r\n}\r\n\r\nexport default Doctors;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet hospitalNames = [\"sql injectors\", \"flask exploit\", \"phpmyadmin nerds\"];\r\nlet streetAddress = [\"342 SE Cari St.\", \"457 NW Nooj Ave.\", \"3243 W Waat St.\"];\r\nlet cities = ['corvegas','corvallis', 'beton', 'portland'];\r\nlet states = ['oregon', 'washington','ohio', 'california'];\r\nlet zipCodes = ['97034','23646','36237','79673','48734'];\r\n\r\nconst defaultColumnValues = {\r\n    hospital_name: hospitalNames,\r\n    street_address: streetAddress,\r\n    city: cities,\r\n    state: states,\r\n    zip_code: zipCodes\r\n};\r\n\r\n\r\nexport default function HospitalTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"hospital_name\", title: \"Hospital Name\" },\r\n    { name: \"street_address\", title: \"Street Address\" },\r\n    { name: \"city\", title: \"City\" },\r\n    { name: \"state\", title: \"State\" },\r\n    { name: \"zip_code\", title: \"Zip Code\" }\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\nimport { Button, Col, Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Hospital.css\"\nimport { MDBDataTableV5 } from 'mdbreact';\nimport HospitalTable from \"../Components/HospitalTable\";\n\n\nclass Hospital extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validate: false,\n      name: \"\",\n      streetAddress: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      \n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"HopitalPage\">\n          <header>\n              Hospital's Data Uploader\n          </header>\n        {/* Name, Street, city, state, zip code */}\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\n          <Form.Row>\n            <Col>\n              <Form.Label className=\"labelForms\" column=\"sm\">\n                Name\n              </Form.Label>\n            </Col>\n            <Col>\n              <Form.Control\n                required\n                size=\"sm\"\n                type=\"text\"\n                placeholder=\"Hospital Name\"\n                className=\"controlForms\"\n                name=\"name\"\n                onChange={this.handleChange}\n                // value={this.state.first_name}\n              />\n            </Col>\n          </Form.Row>\n        </Form.Group>\n\n        <Form.Group controlId=\"name\" className=\"groupForms\">\n          <Form.Row>\n            <Col>\n              <Form.Label className=\"labelForms\" column=\"sm\">\n                Address\n              </Form.Label>\n            </Col>\n            <Col>\n              <Form.Control\n                required\n                size=\"sm\"\n                type=\"text\"\n                placeholder=\"Street Address\"\n                className=\"controlForms\"\n                name=\"streetAddress\"\n                onChange={this.handleChange}\n                // value={this.state.first_name}\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                required\n                size=\"sm\"\n                type=\"text\"\n                placeholder=\"City\"\n                className=\"controlForms\"\n                name=\"city\"\n                onChange={this.handleChange}\n                //value={this.state.last_name}\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                required\n                size=\"sm\"\n                type=\"text\"\n                placeholder=\"State\"\n                className=\"controlForms\"\n                name=\"state\"\n                onChange={this.handleChange}\n                //value={this.state.last_name}\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                required\n                size=\"sm\"\n                type=\"text\"\n                placeholder=\"Zip Code\"\n                className=\"controlForms\"\n                name=\"zipCode\"\n                onChange={this.handleChange}\n                //value={this.state.last_name}\n              />\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Button variant=\"outline-danger\" type=\"submit\">\n          Submit\n        </Button> */}\n\n       \n      {/* table  */}\n      <HospitalTable />\n      </div>\n    );\n  }\n}\n\nexport default Hospital;\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet names = [\"All Father\",\"City Farm\"];\r\nlet deductables = [100.5, 200];\r\n\r\n const defaultColumnValues = {\r\n    provider_name: names,\r\n    deductable: deductables,\r\n};\r\n\r\n\r\nexport default function InsuranceProvidersTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"provider_name\", title: \"Provider Name\" },\r\n    { name: \"deductable\", title: \"Deductable\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 2,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../InsuranceProviders.css\"\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport InsuranceProvidersTable from \"../Components/InsuranceProvidersTable\";\r\n\r\nclass InsuranceProviders extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n              Insurance Provider's Data Upload\r\n        </header>\r\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Provider Name\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Provider Name\"\r\n                className=\"controlForms\"\r\n                name=\"provider_name\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Deductible\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Deductible\"\r\n                className=\"controlForms\"\r\n                name=\"Deductible\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Button variant=\"outline-danger\" type=\"submit\">\r\n          Submit\r\n        </Button> */}\r\n\t\t {/* table  */}\r\n      <InsuranceProvidersTable />\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InsuranceProviders;\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet fnames = [\"Anthony\",\"Jacob\",'Bob','Bara']\r\nlet lname = [\"Nguyen\",\"Hershberger\", \"Myers\", \"Smith\"];\r\nlet DOBs = [\"1981/12/25\",\"1999/6/22\",\"2010/2/11\"];\r\nlet weights = [168, 156, 300, 120];\r\nlet heights = [72, 72, 300, 30];\r\nlet phoneNumbers = [\"xxx-xxx-xxx\"];\r\nlet bloodType = [\"O-\", \"O+\", \"AB+\", \"AB-\", \"A+\", \"A-\", \"B+\", \"B-\"];\r\nlet medicationAllergies = [1, 0];\r\n\r\n const defaultColumnValues = {\r\n    first_name: fnames,\r\n    last_name: lname,\r\n    DOB: DOBs,\r\n    sex: ['M', 'F'],\r\n    weight: weights,\r\n    height: heights,\r\n    phone_number: phoneNumbers,\r\n    blood_type: bloodType,\r\n    medication_allergies: medicationAllergies\r\n};\r\n\r\n\r\nexport default function PatientsTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"first_name\", title: \"First Name\" },\r\n    { name: \"last_name\", title: \"Last Name\" },\r\n    { name: \"DOB\", title: \"Date of Birth\" },\r\n    { name: \"weight\", title: \"Weight\" },\r\n    { name: \"height\", title: \"Height\" },\r\n    { name: \"sex\", title: \"Sex\" },\r\n    { name: \"phone_number\", title: \"Phone Number\" },\r\n    { name: \"blood_type\", title: \"Blood Type\" },\r\n    { name: \"medication_allergies\", title: \"Medication Allergies\"},\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n        {/* seach  */}\r\n        {/* table */}\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Patients.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport PatientsTable from \"../Components/PatientsTable\";\r\n\r\nclass Patients extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <div class=\"PatientsPage\">\r\n        <header>\r\n          <p>Patient's Data Uploader</p>\r\n        </header>\r\n        {/* <div>\r\n          <Form className=\"FormPatients\">\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsFirst_Name\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"First_Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsLast_Name\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Last_Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsDOB\">\r\n              <Form.Label>Date of Birth</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"DOB\"\r\n              />\r\n              <Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsWeight\">\r\n              <Form.Label>Weight</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Weight\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Integer</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsHeight\">\r\n              <Form.Label>Height</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Height\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsSex\">\r\n              <Form.Label>Sex</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Sex\"\r\n              />\r\n              <Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupPatient\"\r\n              controlId=\"PatientsPhone_Number\"\r\n            >\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Phone_Number\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Phone Number for Patients\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsBlood_Type\">\r\n              <Form.Label>Blood Type</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Blood_Type\"\r\n              />\r\n              <Form.Text className=\"text-muted\">A, AB, B, O AND +/-</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupPatient\"\r\n              controlId=\"PatientsMedication_allergies\"\r\n            >\r\n              <Form.Label>Medication Allergies</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Medication_allergies\"\r\n              />\r\n              <Form.Text className=\"text-muted\">1(True) or 0(False)</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div> */}\r\n        {/* table  */}\r\n        <PatientsTable />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Patients;\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet drugs = [\"Oxycoton\", \"Ibuprofen\"];\r\n\r\n const defaultColumnValues = {\r\n    drug_name: drugs,\r\n\r\n};\r\n\r\nexport default function DrugTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"drug_name\", title: \"Drug Name\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 2,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Drug.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport DrugsTable from \"../Components/DrugTable\";\r\n\r\nclass Drugs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  //       name:\"\",\r\n  // \t  datatable: {\r\n  //         columns: [\r\n  //           {\r\n  //             label: 'First Name',\r\n  //             field: 'first_name',\r\n  //             width: 150,\r\n  //             attributes: {\r\n  //             'aria-controls': 'DataTable',\r\n  //             'aria-label': 'Name',\r\n  //             }\r\n  // \t\t  }\r\n  //         ],\r\n  //         rows: [\r\n  // \t\t\t{\r\n  // \t\t\t\tname:\"Morphine\",\r\n  // \t\t\t},\r\n  // \t\t\t{\r\n  // \t\t\t\tname:\"Ibuprofen\",\r\n  // \t\t\t}\r\n  //         ]\r\n  //       }\r\n  //     };\r\n  //     this.handleChange = this.handleChange.bind(this);\r\n  //   }\r\n  //   handleChange(event) {\r\n  //     const { name, value } = event.target;\r\n  //     this.setState({\r\n  //       [name]: value,\r\n  //     });\r\n  //   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DrugsPage\">\r\n        <header>\r\n          <p>Drug's Data Uploader</p>\r\n        </header>\r\n        <div>\r\n          {/* <Form className=\"FormDrugs\">\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorFirst_Name\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"First Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorLast_Name\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Last Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorDOB\">\r\n              <Form.Label>Date of Birth</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"DOB\"\r\n              />\r\n              <Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"Drugsex\">\r\n              <Form.Label>Sex</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Sex\"\r\n              />\r\n              <Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorPhone_Number\">\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Phone Number\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Phone Number for Doctor\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupDoctor\"\r\n              controlId=\"DoctorNumber_Of_Patients\"\r\n            >\r\n              <Form.Label>Number of Patients</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Number Of Patients\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Positive Integer</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form> */}\r\n        </div>\r\n        {/* table  */}\r\n        {/* <MDBDataTableV5\r\n          hover\r\n          entriesOptions={[5, 20, 25]}\r\n          entries={5}\r\n          pagesAmount={4}\r\n          data={this.state.datatable} \r\n        />*/}\r\n\t\t<DrugsTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drugs;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  FormControl,\n  Button,\n} from \"react-bootstrap\"; // Navbar material\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Header.css\";\n\nfunction Header() {\n  return (\n    <div>\n      {/* Navbar  */}\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">Hospital for SQL Injectors</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Data Uploaders\" id=\"collapsable-nav-dropdown\">\n            <NavDropdown.Item href=\"/my-app/#/hospitals\">Hospitals</NavDropdown.Item>\n              <NavDropdown.Item href=\"/my-app/doctors\">Doctors</NavDropdown.Item>\n              <NavDropdown.Item href=\"/my-app/patients\">Patients</NavDropdown.Item>\n              <NavDropdown.Item href=\"/my-app/insurance\">Insurance Providers</NavDropdown.Item>\n              <NavDropdown.Item href=\"/my-app/pharmacies\">Pharmacies</NavDropdown.Item>\n              <NavDropdown.Item href=\"/my-app/drugs\">Drugs</NavDropdown.Item>\n            </NavDropdown>\n            {/* <Nav.Link href=\"/pricing\">Pricing</Nav.Link> */}\n          </Nav>\n          <Nav>\n            {/* <Nav.Link href=\"/enterprise\">For Enterprise</Nav.Link> */}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet hospitalNames = [\"sql injectors\", \"flask exploit\", \"phpmyadmin nerds\"];\r\nlet streetAddress = [\"342 SE Cari St.\", \"457 NW Nooj Ave.\", \"3243 W Waat St.\"];\r\nlet cities = [\"corvegas\", \"corvallis\", \"beton\", \"portland\"];\r\nlet states = [\"oregon\", \"washington\", \"ohio\", \"california\"];\r\nlet zipCodes = [\"97034\", \"23646\", \"36237\", \"79673\", \"48734\"];\r\n\r\nconst defaultColumnValues = {\r\n  hospital_name: hospitalNames,\r\n  street_address: streetAddress,\r\n  city: cities,\r\n  state: states,\r\n  zip_code: zipCodes,\r\n};\r\n\r\nexport default function PharmaciesTable() {\r\n  const [columns] = useState([\r\n    { name: \"hospital_name\", title: \"Hospital Name\" },\r\n    { name: \"street_address\", title: \"Street Address\" },\r\n    { name: \"city\", title: \"City\" },\r\n    { name: \"state\", title: \"State\" },\r\n    { name: \"zip_code\", title: \"Zip Code\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Pharmacies.css\";\r\nimport PharmaciesTable from \"../Components/PharmaciesTable\";\r\n\r\n\r\nclass Pharmacies extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validate: false,\r\n\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Name, Street, city, state, zip code */}\r\n        <header>Pharmacy's Data Uploader</header>\r\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Name\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Pharmacies Name\"\r\n                className=\"controlForms\"\r\n                name=\"name\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Address\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Street Address\"\r\n                className=\"controlForms\"\r\n                name=\"streetAddress\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"City\"\r\n                className=\"controlForms\"\r\n                name=\"city\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                className=\"controlForms\"\r\n                name=\"state\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Zip Code\"\r\n                className=\"controlForms\"\r\n                name=\"zipCode\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"outline-danger\" type=\"submit\">\r\n          Submit\r\n        </Button> */}\r\n\r\n        {/* table  */}\r\n        <PharmaciesTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pharmacies;\r\n","import React from 'react';\nimport \"../Home.css\";\n\nfunction Home(){\n    return(\n        <div class=\"HomePage\">\n            Home Page\n        </div>\n    )\n}\n\n\nexport default Home;","import logo from './logo.svg';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Doctors from \"./views/Doctors\";\nimport Hospital from './views/Hospital';\nimport InsuranceProviders from './views/InsuranceProviders';\nimport Patients from \"./views/Patients\";\nimport Drugs from \"./views/Drug\";\nimport Header from \"./Components/Header\"\nimport Pharmacies from \"./views/Pharmacies\";\nimport Home from \"./Components/Home\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   \n      <Router>\n        {/* header on every page */}\n        <Header /> \n        {/* Route */}\n        <Switch>\n          <Route path=\"/my-app/doctors\">\n            <Doctors />\n          </Route>\n          \n          <Route path=\"/my-app/hospitals\">\n            <Hospital />\n          </Route>\n\n          <Route path=\"/my-app/insurance\">\n            <InsuranceProviders />\n          </Route>\n\n          <Route path=\"/my-app/patients\">\n            <Patients />\n          </Route>\n\n          <Route path=\"/my-app/pharmacies\">\n            <Pharmacies />\n          </Route>\n\n          <Route path=\"/my-app/drugs\">\n            <Drugs />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}