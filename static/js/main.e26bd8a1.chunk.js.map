{"version":3,"sources":["logo.svg","Components/random.js","Components/DoctorsTable.js","views/Doctors.js","Components/HospitalTable.js","views/Hospital.js","Components/InsuranceProvidersTable.js","views/InsuranceProviders.js","Components/PatientsTable.js","views/Patients.js","Components/DrugTable.js","views/Drug.js","Components/Header.js","Components/PharmaciesTable.js","views/Pharmacies.js","Components/DrugsPharmacyTable.js","Components/InsuranceHospitalsTable.js","Components/PharmaciesPatientsTable.js","views/Relationships.js","Components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["seed","mW","mZ","mask","result","getRowId","row","id","defaultColumnValues","first_name","last_name","DOB","sex","phone_number","number_of_patients","HospitalName","DoctorsTable","useState","name","title","columns","columnValues","length","random","randomSeed","data","Object","keys","i","record","forEach","column","values","value","Math","floor","index","push","generateRows","rows","setRows","className","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","deletedSet","Set","filter","has","showAddCommand","showEditCommand","showDeleteCommand","Doctors","props","state","handleChange","bind","event","target","this","setState","React","Component","hospital_name","street_address","city","zip_code","HospitalTable","Hospital","validate","streetAddress","zipCode","provider_name","deductable","InsuranceProvidersTable","InsuranceProviders","weight","height","blood_type","medication_allergies","insuranceProvider","employeeID","hospitalName","PatientsTable","Patients","class","drug_name","DrugTable","Drugs","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","PharmaciesTable","Pharmacies","pharmacyID","DrugsPharmacyTable","providerName","InsuranceHospitalsTable","patient_id","pharmacy_id","PharmaciesPatientsTable","Relationships","Home","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e26bd8a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default function (seed = 123456789) {\r\n  let mW = seed;\r\n  let mZ = 987654321;\r\n  const mask = 0xffffffff;\r\n\r\n  return () => {\r\n    mZ = (36969 * (mZ & 65535) + (mZ >> 16)) & mask;\r\n    mW = (18000 * (mW & 65535) + (mW >> 16)) & mask;\r\n    let result = ((mZ << 16) + mW) & mask;\r\n    result /= 4294967296;\r\n    return result + 0.5;\r\n  };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet fnames = [\"Anthony\",\"Jacob\",'Bob','Bara']\r\nlet lname = [\"Nguyen\",\"Hershberger\", \"Myers\", \"Smith\"];\r\nlet DOBs = [\"1981/12/25\",\"1999/6/22\",\"2010/2/11\"];\r\nlet phoneNumbers = [\"xxx-xxx-xxx\"];\r\nlet numberOfPatients = [0,1,2,3,4,5,6];\r\nlet HospitalName = [\"SQL Injections\", \"Flask Exploits\", \"Athen's Health\"];\r\n\r\n const defaultColumnValues = {\r\n    first_name: fnames,\r\n    last_name: lname,\r\n    DOB: DOBs,\r\n    sex: ['M', 'F'],\r\n    phone_number: phoneNumbers,\r\n    number_of_patients: numberOfPatients,\r\n    HospitalName:HospitalName\r\n};\r\n\r\n\r\nexport default function DoctorsTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"first_name\", title: \"First Name\" },\r\n    { name: \"last_name\", title: \"Last Name\" },\r\n    { name: \"DOB\", title: \"Date of Birth\" },\r\n    { name: \"sex\", title: \"Sex\" },\r\n    { name: \"phone_number\", title: \"Phone Number\" },\r\n    { name: \"number_of_patients\", title: \"Number of Patients\" },\r\n    { name: \"HospitalName\", title: \"Hospital Name\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 4,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, {useState} from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Doctors.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport DoctorsTable from \"../Components/DoctorsTable\";\r\n\r\n\r\nclass Doctors extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  \r\n\trender() {\r\n\t  return (\r\n\t\t<div className=\"DoctorsPage\">\r\n\t\t  <header>\r\n\t\t\t<p>Doctor's Data Uploader</p>\r\n\t\t  </header>\r\n\t\t  <div>\r\n\t\t\t{/* <Form className=\"FormDoctors\">\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorFirst_Name\">\r\n\t\t\t\t<Form.Label>First Name</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"First Name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorLast_Name\">\r\n\t\t\t\t<Form.Label>Last Name</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Last Name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorDOB\">\r\n\t\t\t\t<Form.Label>Date of Birth</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"DOB\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorSex\">\r\n\t\t\t\t<Form.Label>Sex</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Sex\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group className=\"GroupDoctor\" controlId=\"DoctorPhone_Number\">\r\n\t\t\t\t<Form.Label>Phone Number</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Phone Number\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">\r\n\t\t\t\t  Phone Number for Doctor\r\n\t\t\t\t</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Form.Group\r\n\t\t\t\tclassName=\"GroupDoctor\"\r\n\t\t\t\t controlId=\"DoctorNumber_Of_Patients\"\r\n\t\t\t  >\r\n\t\t\t\t<Form.Label>Number of Patients</Form.Label>\r\n\t\t\t\t<Form.Control\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  className=\"internalText\"\r\n\t\t\t\t  placeholder=\"Number Of Patients\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Text className=\"text-muted\">Positive Integer</Form.Text>\r\n\t\t\t  </Form.Group>\r\n\r\n\t\t\t  <Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\tSubmit\r\n\t\t\t  </Button>\r\n\t\t\t</Form> */}\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\t{/* table  */}\r\n\t\t\t\t<DoctorsTable />\r\n\t\t</div>\r\n\t  );\r\n\t}\r\n}\r\n\r\nexport default Doctors;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet hospitalNames = [\"sql injectors\", \"flask exploit\", \"phpmyadmin nerds\"];\r\nlet streetAddress = [\"342 SE Cari St.\", \"457 NW Nooj Ave.\", \"3243 W Waat St.\"];\r\nlet cities = ['corvegas','corvallis', 'beton', 'portland'];\r\nlet states = ['oregon', 'washington','ohio', 'california'];\r\nlet zipCodes = ['97034','23646','36237','79673','48734'];\r\n\r\nconst defaultColumnValues = {\r\n    hospital_name: hospitalNames,\r\n    street_address: streetAddress,\r\n    city: cities,\r\n    state: states,\r\n    zip_code: zipCodes\r\n};\r\n\r\n\r\nexport default function HospitalTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"hospital_name\", title: \"Hospital Name\" },\r\n    { name: \"street_address\", title: \"Street Address\" },\r\n    { name: \"city\", title: \"City\" },\r\n    { name: \"state\", title: \"State\" },\r\n    { name: \"zip_code\", title: \"Zip Code\" }\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Hospital.css\"\r\nimport { MDBDataTableV5 } from 'mdbreact';\r\nimport HospitalTable from \"../Components/HospitalTable\";\r\n\r\n\r\nclass Hospital extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validate: false,\r\n      name: \"\",\r\n      streetAddress: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zipCode: \"\",\r\n      \r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"HopitalPage\">\r\n          <header>\r\n              Hospital's Data Uploader\r\n          </header>\r\n        {/* Name, Street, city, state, zip code */}\r\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Name\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Hospital Name\"\r\n                className=\"controlForms\"\r\n                name=\"name\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Address\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Street Address\"\r\n                className=\"controlForms\"\r\n                name=\"streetAddress\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"City\"\r\n                className=\"controlForms\"\r\n                name=\"city\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                className=\"controlForms\"\r\n                name=\"state\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Zip Code\"\r\n                className=\"controlForms\"\r\n                name=\"zipCode\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"outline-danger\" type=\"submit\">\r\n          Submit\r\n        </Button> */}\r\n\r\n       \r\n      {/* table  */}\r\n      <HospitalTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hospital;\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet names = [\"All Father\",\"City Farm\"];\r\nlet deductables = [100.5, 200];\r\n\r\n const defaultColumnValues = {\r\n    provider_name: names,\r\n    deductable: deductables,\r\n};\r\n\r\n\r\nexport default function InsuranceProvidersTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"provider_name\", title: \"Provider Name\" },\r\n    { name: \"deductable\", title: \"Deductable\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 2,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../InsuranceProviders.css\"\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport InsuranceProvidersTable from \"../Components/InsuranceProvidersTable\";\r\n\r\nclass InsuranceProviders extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n              Insurance Provider's Data Upload\r\n        </header>\r\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Provider Name\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Provider Name\"\r\n                className=\"controlForms\"\r\n                name=\"provider_name\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Deductible\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Deductible\"\r\n                className=\"controlForms\"\r\n                name=\"Deductible\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Button variant=\"outline-danger\" type=\"submit\">\r\n          Submit\r\n        </Button> */}\r\n\t\t {/* table  */}\r\n      <InsuranceProvidersTable />\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InsuranceProviders;\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet fnames = [\"Anthony\",\"Jacob\",'Bob','Bara']\r\nlet lname = [\"Nguyen\",\"Hershberger\", \"Myers\", \"Smith\"];\r\nlet DOBs = [\"1981/12/25\",\"1999/6/22\",\"2010/2/11\"];\r\nlet weights = [168, 156, 300, 120];\r\nlet heights = [72, 72, 300, 30];\r\nlet phoneNumbers = [\"xxx-xxx-xxx\"];\r\nlet bloodType = [\"O-\", \"O+\", \"AB+\", \"AB-\", \"A+\", \"A-\", \"B+\", \"B-\"];\r\nlet medicationAllergies = [1, 0];\r\nlet insuranceProvider = [\"All-Father\", \"Red Sword\"];\r\nlet employeeID = [1,2,3,4];\r\nlet hospitalName = [\"SQL Injections\", \"Flask Exploits\", \"Athen's Health\"];\r\n\r\n const defaultColumnValues = {\r\n    first_name: fnames,\r\n    last_name: lname,\r\n    DOB: DOBs,\r\n    sex: ['M', 'F'],\r\n    weight: weights,\r\n    height: heights,\r\n    phone_number: phoneNumbers,\r\n    blood_type: bloodType,\r\n    medication_allergies: medicationAllergies,\r\n    insuranceProvider: insuranceProvider,\r\n    employeeID: employeeID,\r\n    hospitalName: hospitalName\r\n};\r\n\r\n\r\nexport default function PatientsTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"first_name\", title: \"First Name\" },\r\n    { name: \"last_name\", title: \"Last Name\" },\r\n    { name: \"DOB\", title: \"Date of Birth\" },\r\n    { name: \"weight\", title: \"Weight\" },\r\n    { name: \"height\", title: \"Height\" },\r\n    { name: \"sex\", title: \"Sex\" },\r\n    { name: \"phone_number\", title: \"Phone Number\" },\r\n    { name: \"blood_type\", title: \"Blood Type\" },\r\n    { name: \"medication_allergies\", title: \"Medication Allergies\" },\r\n    { name: \"insuranceProvider\", title: \"Insurance Provider\" },\r\n    { name: \"employeeID\", title: \"Doctor's ID\" },\r\n    { name: \"hospitalName\", title: \"Hospital Name\"}\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n        {/* seach  */}\r\n        {/* table */}\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Patients.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport PatientsTable from \"../Components/PatientsTable\";\r\n\r\nclass Patients extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n  }\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n\r\n    return (\r\n      <div class=\"PatientsPage\">\r\n        <header>\r\n          <p>Patient's Data Uploader</p>\r\n        </header>\r\n        {/* <div>\r\n          <Form className=\"FormPatients\">\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsFirst_Name\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"First_Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsLast_Name\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Last_Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsDOB\">\r\n              <Form.Label>Date of Birth</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"DOB\"\r\n              />\r\n              <Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsWeight\">\r\n              <Form.Label>Weight</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Weight\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Integer</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsHeight\">\r\n              <Form.Label>Height</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Height\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsSex\">\r\n              <Form.Label>Sex</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Sex\"\r\n              />\r\n              <Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupPatient\"\r\n              controlId=\"PatientsPhone_Number\"\r\n            >\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Phone_Number\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Phone Number for Patients\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupPatient\" controlId=\"PatientsBlood_Type\">\r\n              <Form.Label>Blood Type</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Blood_Type\"\r\n              />\r\n              <Form.Text className=\"text-muted\">A, AB, B, O AND +/-</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupPatient\"\r\n              controlId=\"PatientsMedication_allergies\"\r\n            >\r\n              <Form.Label>Medication Allergies</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Medication_allergies\"\r\n              />\r\n              <Form.Text className=\"text-muted\">1(True) or 0(False)</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div> */}\r\n        {/* table  */}\r\n        <PatientsTable />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Patients;\r\n","import React, { useState } from \"react\";\r\nimport { EditingState, SearchState, IntegratedFiltering } from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet drugs = [\"Oxycoton\", \"Ibuprofen\"];\r\n\r\n const defaultColumnValues = {\r\n    drug_name: drugs,\r\n\r\n};\r\n\r\nexport default function DrugTable() {\r\n    \r\n  const [columns] = useState([\r\n    { name: \"drug_name\", title: \"Drug Name\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 2,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n      <SearchState/>\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Drug.css\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport DrugsTable from \"../Components/DrugTable\";\r\n\r\nclass Drugs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  //       name:\"\",\r\n  // \t  datatable: {\r\n  //         columns: [\r\n  //           {\r\n  //             label: 'First Name',\r\n  //             field: 'first_name',\r\n  //             width: 150,\r\n  //             attributes: {\r\n  //             'aria-controls': 'DataTable',\r\n  //             'aria-label': 'Name',\r\n  //             }\r\n  // \t\t  }\r\n  //         ],\r\n  //         rows: [\r\n  // \t\t\t{\r\n  // \t\t\t\tname:\"Morphine\",\r\n  // \t\t\t},\r\n  // \t\t\t{\r\n  // \t\t\t\tname:\"Ibuprofen\",\r\n  // \t\t\t}\r\n  //         ]\r\n  //       }\r\n  //     };\r\n  //     this.handleChange = this.handleChange.bind(this);\r\n  //   }\r\n  //   handleChange(event) {\r\n  //     const { name, value } = event.target;\r\n  //     this.setState({\r\n  //       [name]: value,\r\n  //     });\r\n  //   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DrugsPage\">\r\n        <header>\r\n          <p>Drug's Data Uploader</p>\r\n        </header>\r\n        <div>\r\n          {/* <Form className=\"FormDrugs\">\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorFirst_Name\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"First Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorLast_Name\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Last Name\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Variable Characters</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorDOB\">\r\n              <Form.Label>Date of Birth</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"DOB\"\r\n              />\r\n              <Form.Text className=\"text-muted\">YYYY-MM-DD</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"Drugsex\">\r\n              <Form.Label>Sex</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Sex\"\r\n              />\r\n              <Form.Text className=\"text-muted\">M or F Variable Char</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"GroupDoctor\" controlId=\"DoctorPhone_Number\">\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Phone Number\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Phone Number for Doctor\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group\r\n              className=\"GroupDoctor\"\r\n              controlId=\"DoctorNumber_Of_Patients\"\r\n            >\r\n              <Form.Label>Number of Patients</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"internalText\"\r\n                placeholder=\"Number Of Patients\"\r\n              />\r\n              <Form.Text className=\"text-muted\">Positive Integer</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form> */}\r\n        </div>\r\n        {/* table  */}\r\n        {/* <MDBDataTableV5\r\n          hover\r\n          entriesOptions={[5, 20, 25]}\r\n          entries={5}\r\n          pagesAmount={4}\r\n          data={this.state.datatable} \r\n        />*/}\r\n\t\t<DrugsTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drugs;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Form,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\"; // Navbar material\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      {/* Navbar  */}\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"https://ninjaco1.github.io/my-app/#/\">\r\n          Hospital for SQL Injectors\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <NavDropdown title=\"Data Uploaders\" id=\"collapsable-nav-dropdown\">\r\n              <NavDropdown.Item href=\"/my-app/#/hospitals\">\r\n                Hospitals\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/doctors\">\r\n                Doctors\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/patients\">\r\n                Patients\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/insurance\">\r\n                Insurance Providers\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/pharmacies\">\r\n                Pharmacies\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/drugs\">\r\n                Drugs\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/my-app/#/relationships\">\r\n                Relationships\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            {/* <Nav.Link href=\"/pricing\">Pricing</Nav.Link> */}\r\n          </Nav>\r\n          <Nav>\r\n            {/* <Nav.Link href=\"/enterprise\">For Enterprise</Nav.Link> */}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\n\r\nlet hospitalNames = [\"sql injectors\", \"flask exploit\", \"phpmyadmin nerds\"];\r\nlet streetAddress = [\"342 SE Cari St.\", \"457 NW Nooj Ave.\", \"3243 W Waat St.\"];\r\nlet cities = [\"corvegas\", \"corvallis\", \"beton\", \"portland\"];\r\nlet states = [\"oregon\", \"washington\", \"ohio\", \"california\"];\r\nlet zipCodes = [\"97034\", \"23646\", \"36237\", \"79673\", \"48734\"];\r\n\r\nconst defaultColumnValues = {\r\n  hospital_name: hospitalNames,\r\n  street_address: streetAddress,\r\n  city: cities,\r\n  state: states,\r\n  zip_code: zipCodes,\r\n};\r\n\r\nexport default function PharmaciesTable() {\r\n  const [columns] = useState([\r\n    { name: \"hospital_name\", title: \"Hospital Name\" },\r\n    { name: \"street_address\", title: \"Street Address\" },\r\n    { name: \"city\", title: \"City\" },\r\n    { name: \"state\", title: \"State\" },\r\n    { name: \"zip_code\", title: \"Zip Code\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Pharmacies.css\";\r\nimport PharmaciesTable from \"../Components/PharmaciesTable\";\r\n\r\n\r\nclass Pharmacies extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validate: false,\r\n\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Name, Street, city, state, zip code */}\r\n        <header>Pharmacy's Data Uploader</header>\r\n        {/* <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Name\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Pharmacies Name\"\r\n                className=\"controlForms\"\r\n                name=\"name\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"name\" className=\"groupForms\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label className=\"labelForms\" column=\"sm\">\r\n                Address\r\n              </Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Street Address\"\r\n                className=\"controlForms\"\r\n                name=\"streetAddress\"\r\n                onChange={this.handleChange}\r\n                // value={this.state.first_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"City\"\r\n                className=\"controlForms\"\r\n                name=\"city\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                className=\"controlForms\"\r\n                name=\"state\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                required\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                placeholder=\"Zip Code\"\r\n                className=\"controlForms\"\r\n                name=\"zipCode\"\r\n                onChange={this.handleChange}\r\n                //value={this.state.last_name}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"outline-danger\" type=\"submit\">\r\n          Submit\r\n        </Button> */}\r\n\r\n        {/* table  */}\r\n        <PharmaciesTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pharmacies;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\nlet drugName = [\r\n  \"Ibuprofen\",\r\n  \"Epineferon\",\r\n  \"Morphine\",\r\n  \"Oxycodone\",\r\n  \"Codeine\",\r\n  \"Aspirin\",\r\n];\r\nlet pharmacyID = [1,2,3];\r\n\r\nconst defaultColumnValues = {\r\n   drug_name: drugName,\r\n   pharmacyID: pharmacyID\r\n   \r\n};\r\n\r\nexport default function DrugsPharmacyTable() {\r\n   const [columns] = useState([\r\n     { name: \"drug_name\", title: \"Drug's Name\" },\r\n     { name: \"pharmacyID\", title: \"Pharmacies ID\" },\r\n   ]);\r\n   const [rows, setRows] = useState(\r\n     generateRows({\r\n       columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n       length: 8,\r\n     })\r\n   );\r\n\r\n   const commitChanges = ({ added, changed, deleted }) => {\r\n     let changedRows;\r\n     if (added) {\r\n       const startingAddedId =\r\n         rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n       changedRows = [\r\n         ...rows,\r\n         ...added.map((row, index) => ({\r\n           id: startingAddedId + index,\r\n           ...row,\r\n         })),\r\n       ];\r\n     }\r\n     if (changed) {\r\n       changedRows = rows.map((row) =>\r\n         changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n       );\r\n     }\r\n     if (deleted) {\r\n       const deletedSet = new Set(deleted);\r\n       changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n     }\r\n     setRows(changedRows);\r\n   };\r\n\r\n   return (\r\n     <div className=\"card\">\r\n       {/* seach  */}\r\n       {/* table */}\r\n       <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n         <SearchState />\r\n         <IntegratedFiltering />\r\n         <EditingState onCommitChanges={commitChanges} />\r\n         <Table />\r\n         <TableHeaderRow />\r\n         <TableEditRow />\r\n         <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n         <Toolbar />\r\n         <SearchPanel />\r\n       </Grid>\r\n     </div>\r\n   );\r\n}\r\n\r\nfunction generateRows({\r\n   columnValues = defaultColumnValues,\r\n   length,\r\n   random = randomSeed(329972281),\r\n }) {\r\n   const data = [];\r\n   const columns = Object.keys(columnValues);\r\n\r\n   for (let i = 0; i < length; i += 1) {\r\n     const record = {};\r\n\r\n     columns.forEach((column) => {\r\n       let values = columnValues[column];\r\n\r\n       if (typeof values === \"function\") {\r\n         record[column] = values({ random, index: i, record });\r\n         return;\r\n       }\r\n\r\n       while (values.length === 2 && typeof values[1] === \"object\") {\r\n         values = values[1][record[values[0]]];\r\n       }\r\n\r\n       const value = values[Math.floor(random() * values.length)];\r\n       if (typeof value === \"object\") {\r\n         record[column] = { ...value };\r\n       } else {\r\n         record[column] = value;\r\n       }\r\n     });\r\n\r\n     data.push(record);\r\n   }\r\n\r\n   return data;\r\n}","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\nlet providerName = [\"All-Father\",\"Red Sword\"];\r\nlet HospitalName = [\"SQL Injections\", \"Flask Exploits\", \"Athen's Health\"];\r\n\r\nconst defaultColumnValues = {\r\n  providerName: providerName,\r\n  HospitalName: HospitalName,\r\n};\r\n\r\nexport default function InsuranceHospitalsTable() {\r\n  const [columns] = useState([\r\n    { name: \"providerName\", title: \"Provider's Name\" },\r\n    { name: \"HospitalName\", title: \"Hospital's Name\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      {/* seach  */}\r\n      {/* table */}\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  EditingState,\r\n  SearchState,\r\n  IntegratedFiltering,\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  Toolbar,\r\n  SearchPanel,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from \"@devexpress/dx-react-grid-bootstrap4\";\r\nimport \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\r\nimport randomSeed from \"./random\";\r\n\r\nconst getRowId = (row) => row.id;\r\nlet patientid = [1,2,3,4];\r\nlet pharmacyid = [1,2,3,4];\r\n\r\nconst defaultColumnValues = {\r\n  patient_id: patientid,\r\n  pharmacy_id: pharmacyid,\r\n};\r\n\r\nexport default function PharmaciesPatientsTable() {\r\n  const [columns] = useState([\r\n    { name: \"patient_id\", title: \"Patient's ID\" },\r\n    { name: \"pharmacy_id\", title: \"Pharmacies ID\" },\r\n  ]);\r\n  const [rows, setRows] = useState(\r\n    generateRows({\r\n      columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n      length: 8,\r\n    })\r\n  );\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId =\r\n        rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map((row) =>\r\n        changed[row.id] ? { ...row, ...changed[row.id] } : row\r\n      );\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter((row) => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      {/* seach  */}\r\n      {/* table */}\r\n      <Grid rows={rows} columns={columns} getRowId={getRowId}>\r\n        <SearchState />\r\n        <IntegratedFiltering />\r\n        <EditingState onCommitChanges={commitChanges} />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\r\n        <Toolbar />\r\n        <SearchPanel />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === \"function\") {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === \"object\") {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === \"object\") {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import \"../RelationshipTable.css\";\r\nimport DrugsPharmacyTable from \"../Components/DrugsPharmacyTable\";\r\nimport InsuranceHospitalsTable from \"../Components/InsuranceHospitalsTable\";\r\nimport PharmaciesPatientsTable from \"../Components/PharmaciesPatientsTable\";\r\n\r\nclass Relationships extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        validate: false,\r\n  \r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      const { name, value } = event.target;\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <header>DrugsPharmacy's Data Uploader</header>\r\n          <DrugsPharmacyTable />\r\n\r\n          <header>InsuranceHospitals's Data Uploader</header>\r\n          <InsuranceHospitalsTable />\r\n\r\n          <header>PharmaciesPatients's Data Uploader</header>\r\n          <PharmaciesPatientsTable />\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\n  export default Relationships;","import React from 'react';\r\nimport \"../Home.css\";\r\n\r\nfunction Home(){\r\n    return(\r\n        <div class=\"HomePage\">\r\n            Home Page\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Doctors from \"./views/Doctors\";\r\nimport Hospital from './views/Hospital';\r\nimport InsuranceProviders from './views/InsuranceProviders';\r\nimport Patients from \"./views/Patients\";\r\nimport Drugs from \"./views/Drug\";\r\nimport Header from \"./Components/Header\"\r\nimport Pharmacies from \"./views/Pharmacies\";\r\nimport Relationships from \"./views/Relationships\";\r\nimport Home from \"./Components/Home\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n   \r\n      {/* <Router> */}\r\n        {/* header on every page */}\r\n        <Header /> \r\n        {/* Route */}\r\n        {/* <Switch> */}\r\n          {/* <Route path=\"/my-app/doctors\">\r\n            <Doctors />\r\n          </Route>\r\n          \r\n          <Route path=\"/my-app/hospitals\">\r\n            <Hospital />\r\n          </Route>\r\n\r\n          <Route path=\"/my-app/insurance\">\r\n            <InsuranceProviders />\r\n          </Route>\r\n\r\n          <Route path=\"/my-app/patients\">\r\n            <Patients />\r\n          </Route>\r\n\r\n          <Route path=\"/my-app/pharmacies\">\r\n            <Pharmacies />\r\n          </Route>\r\n\r\n          <Route path=\"/my-app/drugs\">\r\n            <Drugs />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route> */}\r\n        {/* </Switch> */}\r\n\r\n      {/* </Router> */}\r\n      <Route exact path='/'component={Home}/>\r\n      <Route path='/doctors' component={Doctors}/>\r\n      <Route path='/hospitals' component={Hospital}/>\r\n      <Route path='/insurance' component={InsuranceProviders}/>\r\n      <Route path='/patients' component={Patients}/>\r\n      <Route path='/pharmacies' component={Pharmacies}/>\r\n      <Route path='/drugs' component={Drugs}/>\r\n      <Route path='/relationships' component={Relationships}/>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}